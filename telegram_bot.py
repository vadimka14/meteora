import asyncio
import json
import logging
import time

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
class Config:
    BOT_TOKEN = ''  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω
    LOG_FILE_PATH = 'logs/log.log'  # –®–ª—è—Ö –¥–æ –ª–æ–≥-—Ñ–∞–π–ª—É
    TARGET_CHAT_ID = '538772539'  # ID —á–∞—Ç—É/–∫–∞–Ω–∞–ª—É –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
    SENT_LOGS_FILE = 'logs/sent_logs.json'


def format_log_message(log):
    """–§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É –∑ –µ–º–æ–¥–∑—ñ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é"""
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –ª–æ–≥—É —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –µ–º–æ–¥–∑—ñ
    emoji_map = {
        'error': 'üö®',
        'critical': 'üí•',
        'warning': '‚ö†Ô∏è',
        'info': 'üìù',
        'debug': 'üîç'
    }

    # –ü–æ—à—É–∫ —Ç–∏–ø—É –ª–æ–≥—É
    log_type = 'info'
    for key, emoji in emoji_map.items():
        if key in log.lower():
            log_type = key
            break

    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    formatted_message = f"""
{emoji_map.get(log_type, 'üìå')} <b>{log_type.upper()} Log</b>

üìÖ –î–µ—Ç–∞–ª—ñ:
<code>{log}</code>

üïí –ß–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {time.strftime('%Y-%m-%d %H:%M:%S')}
"""
    return formatted_message


def load_sent_logs():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –ª–æ–≥—ñ–≤"""
    try:
        with open(Config.SENT_LOGS_FILE, 'r') as f:
            return set(json.load(f))
    except (FileNotFoundError, json.JSONDecodeError):
        return set()


def save_sent_logs(sent_logs):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –ª–æ–≥—ñ–≤"""
    with open(Config.SENT_LOGS_FILE, 'w') as f:
        json.dump(list(sent_logs), f)


async def parse_log_file(sent_logs):
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–∏—Ö –ª–æ–≥—ñ–≤"""
    try:
        with open(Config.LOG_FILE_PATH, 'r') as file:
            logs = file.readlines()

        # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ª–æ–≥—ñ–≤, —è–∫—ñ —â–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏
        new_logs = [
            log.strip() for log in logs
            if log.strip() not in sent_logs
        ]

        return new_logs
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
        return []


async def send_logs_to_telegram(bot, logs, chat_id, sent_logs):
    """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ —É Telegram"""
    if not logs:
        return sent_logs

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –ª–æ–≥—É –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
    for log in logs:
        try:
            formatted_log = format_log_message(log)
            await bot.send_message(
                chat_id,
                formatted_log,
                parse_mode='HTML'
            )
            sent_logs.add(log)
            # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
            await asyncio.sleep(0.5)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–æ–≥—É: {e}")

    return sent_logs


async def log_monitoring_job(bot):
    """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥—ñ–≤"""
    sent_logs = load_sent_logs()

    while True:
        await asyncio.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É

        try:
            logs = await parse_log_file(sent_logs)

            if logs:
                sent_logs = await send_logs_to_telegram(
                    bot,
                    logs,
                    Config.TARGET_CHAT_ID,
                    sent_logs
                )

                # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –ª–æ–≥—ñ–≤
                save_sent_logs(sent_logs)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")


async def main():
    bot = Bot(token=Config.BOT_TOKEN)
    dp = Dispatcher()

    # –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ª–æ–≥—ñ–≤
    asyncio.create_task(log_monitoring_job(bot))

    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main())



# def load_sent_logs():
#     """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –ª–æ–≥—ñ–≤"""
#     try:
#         with open(Config.SENT_LOGS_FILE, 'r') as f:
#             return set(json.load(f))
#     except (FileNotFoundError, json.JSONDecodeError):
#         return set()
#
#
# def save_sent_logs(sent_logs):
#     """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –ª–æ–≥—ñ–≤"""
#     with open(Config.SENT_LOGS_FILE, 'w') as f:
#         json.dump(list(sent_logs), f)
#
#
# async def parse_log_file(sent_logs):
#     """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–∏—Ö –ª–æ–≥—ñ–≤"""
#     try:
#         with open(Config.LOG_FILE_PATH, 'r') as file:
#             logs = file.readlines()
#
#         # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ª–æ–≥—ñ–≤, —è–∫—ñ —â–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏
#         new_logs = [
#             log.strip() for log in logs
#             if log.strip() not in sent_logs
#         ]
#
#         return new_logs
#     except Exception as e:
#         logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
#         return []
#
#
# async def send_logs_to_telegram(bot, logs, chat_id, sent_logs):
#     """–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ —É Telegram"""
#     if not logs:
#         return sent_logs
#
#     # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ –ª–æ–≥—É –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
#     for log in logs:
#         try:
#             await bot.send_message(
#                 chat_id,
#                 f"```\n{log}\n```",
#                 parse_mode='Markdown'
#             )
#             sent_logs.add(log)
#             # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
#             await asyncio.sleep(0.5)
#         except Exception as e:
#             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–æ–≥—É: {e}")
#
#     return sent_logs
#
#
# async def log_monitoring_job(bot):
#     """–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥—ñ–≤"""
#     sent_logs = load_sent_logs()
#
#     while True:
#         await asyncio.sleep(10)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—É////
#
#         try:
#             logs = await parse_log_file(sent_logs)
#
#             if logs:
#                 sent_logs = await send_logs_to_telegram(
#                     bot,
#                     logs,
#                     Config.TARGET_CHAT_ID,
#                     sent_logs
#                 )
#
#                 # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –ª–æ–≥—ñ–≤
#                 save_sent_logs(sent_logs)
#
#         except Exception as e:
#             logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: {e}")
#
#
# async def main():
#     bot = Bot(token=Config.BOT_TOKEN)
#     dp = Dispatcher()
#
#     # –ó–∞–ø—É—Å–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ª–æ–≥—ñ–≤
#     asyncio.create_task(log_monitoring_job(bot))
#
#     try:
#         await dp.start_polling(bot)
#     except Exception as e:
#         logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: {e}")
#     finally:
#         await bot.session.close()
#
#
# if __name__ == '__main__':
#     asyncio.run(main())